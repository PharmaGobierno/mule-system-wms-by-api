<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<sub-flow name="orchestrators-update-availability" doc:id="9de8a181-03dc-4282-8646-dec20083d7c8" >
<!-- [STUDIO:"Payload"]		<logger level="INFO" doc:name="Payload" doc:id="4153579e-e855-471f-bd59-07630cedd630" message="payloadXML: #[payload] " /> [STUDIO] -->
		<ee:transform doc:name="get Skus" doc:id="c7a34687-61f3-4324-b958-cd1dcfbd1680" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
("'" ++((payload.skus) joinBy "," ) replace "," with("','") ++ "'")]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="arrayAux" ><![CDATA[%dw 2.0
output application/json
---
[]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
<ee:transform doc:name="Set Query" doc:id="9fe9ae85-71bd-457f-a6db-2e5db808df54" >
            <ee:message >
            </ee:message>
            <ee:variables >
				<ee:set-variable variableName="query" ><![CDATA[%dw 2.0
import modules::pharma
output application/json
var schema = pharma::getSchema(attributes.queryParams.customer_name, p('database.wms.blueyonder.schema'),p('database.wms.mega.schema'))
---
"WITH area_excl AS
(
	SELECT DISTINCT poldat.rtstr1
	FROM "++ schema ++".poldat
	WHERE
		polcod = 'VAR-TRAXION'
		AND polvar = 'QUERY_DISP'
		AND polval = 'AREAS'
),
ubic_excl AS
(
	SELECT DISTINCT	poldat.rtstr1
	FROM "++ schema ++".poldat
	WHERE
		polcod = 'VAR-TRAXION'
		AND polvar = 'QUERY_DISP'
		AND polval = 'UBICACIONES'
),
inventario AS
(
	SELECT
		iv.wh_id,
		SUM(iv.untqty) cantidad,
		iv.untcas,
		(
			CASE
			    WHEN iv.untpak > 1 THEN
			        'PQ'
			    ELSE
			        'PZ'
			END
		) paqueteo,
		(
			CASE
			    WHEN iv.untpak = 1 THEN
			        1
			    ELSE
			        iv.untpak
			END
		) cantpzpck,
		iv.ftpcod,
		iv.prtnum clave,
		iv.expire_dte expira,
		iv.lotnum lote
	FROM "++ schema ++".inventory_view iv
	LEFT JOIN "++ schema ++".rcvlin rcvlin ON iv.rcvkey = rcvlin.rcvkey
	LEFT JOIN "++ schema ++".rcvtrk rctk ON rcvlin.trknum = rctk.trknum
	LEFT JOIN "++ schema ++".trlr trl ON rctk.trlr_id = trl.trlr_id
	JOIN "++ schema ++".locmst ON iv.stoloc = locmst.stoloc
	WHERE iv.invsts = ( 'DISP' )
		AND ( trl.trlr_stat = 'D' OR trl.trlr_stat IS NULL )
		AND iv.ship_line_id IS NULL
		AND locmst.arecod NOT IN
		(
			SELECT *
			FROM area_excl
		)
		AND iv.wh_id = 'AVIOR-27'
		AND locmst.stoloc NOT IN
		(
			SELECT *
			FROM ubic_excl
		)
	GROUP BY
		iv.wh_id,
		iv.untpak,
		iv.untcas,
		iv.ftpcod,
		iv.prtnum,
		iv.expire_dte,
		iv.lotnum
	ORDER BY
		iv.expire_dte,
		iv.lotnum
),
ords AS
(
	SELECT
		ord_line.prtnum,
		SUM(ord_line.ordqty) cant_comp
	FROM "++ schema ++".ord_line
	JOIN "++ schema ++".shipment_line
		ON shipment_line.prtnum = ord_line.prtnum
		AND shipment_line.wh_id = ord_line.wh_id
		AND shipment_line.client_id = ord_line.client_id
		AND shipment_line.ordnum = ord_line.ordnum
		AND shipment_line.ordlin = ord_line.ordlin
		AND shipment_line.ordsln = ord_line.ordsln
		AND shipment_line.linsts != 'B'
	WHERE
		NOT EXISTS
		(
			SELECT null
			FROM "++ schema ++".pckwrk_hdr
				INNER JOIN "++ schema ++".pckwrk_dtl
				ON pckwrk_dtl.wrkref = pckwrk_hdr.wrkref
			WHERE pckwrk_hdr.wrktyp NOT IN ( 'M', 'T', 'G', 'E', 'R', 'D', 'S' )
				AND pckwrk_dtl.ordnum = ord_line.ordnum
		)
	GROUP BY
		ord_line.prtnum
),
pcks AS
(
	SELECT
		pckwrk_hdr.prtnum,
		pckwrk_hdr.ftpcod,
		SUM(pckwrk_hdr.pckqty - pckwrk_dtl.appqty) pckqty
	FROM "++ schema ++".pckwrk_hdr
		INNER JOIN "++ schema ++".pckwrk_dtl
		ON pckwrk_dtl.wrkref = pckwrk_hdr.wrkref
	WHERE pckwrk_dtl.appqty < pckwrk_hdr.pckqty
		AND pckwrk_hdr.wrktyp = 'P'
		AND pckwrk_hdr.invsts = 'DISP'
		AND pckwrk_hdr.pcksts not in ('C')
		AND pckwrk_hdr.srcare NOT IN
		(
			SELECT *
			FROM area_excl
		)
	GROUP BY
		pckwrk_hdr.prtnum,
		pckwrk_hdr.ftpcod
),
prorrateo_pck AS
(
	SELECT
		inventario.wh_id,
		inventario.clave,
		inventario.untcas,
		inventario.paqueteo,
		inventario.cantpzpck,
		inventario.lote,
		inventario.expira,
		inventario.ftpcod,
		NVL(pcks.pckqty, 0) comp_pck,
		inventario.cantidad cant_inventario,
		CASE
			WHEN
				--la suma del inventario del registro actual aún es menor o igual al total de la reserva
				SUM(inventario.cantidad) OVER
				(
					PARTITION BY inventario.clave, inventario.ftpcod
					ORDER BY inventario.expira, inventario.lote DESC
					ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
				) <= NVL(pcks.pckqty, 0)
			THEN inventario.cantidad --colocar la cantidad del inventario
			ELSE
				--asignar el valor máximo
				GREATEST
				(
					--lo que faltaba por asignar en el registro anterior
					NVL(pcks.pckqty, 0) -
					NVL
					(
						SUM(inventario.cantidad) OVER
						(
							PARTITION BY inventario.clave, inventario.ftpcod
							ORDER BY inventario.expira, inventario.lote DESC
							ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
						),
						0
					),
					0 --0 si la resta es negativa
				)
		END stock_asignado_pck
	FROM
		inventario
		LEFT JOIN pcks ON pcks.prtnum = inventario.clave AND pcks.ftpcod = inventario.ftpcod
),
prorrateo_ord AS
(
	SELECT
		pp.wh_id,
		pp.clave,
		pp.untcas,
		pp.paqueteo,
		pp.cantpzpck,
		pp.expira,
		pp.ftpcod,
		pp.comp_pck,
		pp.cant_inventario,
		pp.stock_asignado_pck,
		NVL(ords.cant_comp, 0) comp_ord,
		pp.cant_inventario - pp.stock_asignado_pck disponible_ord,
		CASE
			WHEN
				--la suma del inventario del registro actual aún es menor o igual al total de la reserva
				SUM(pp.cant_inventario - pp.stock_asignado_pck) OVER
				(
					PARTITION BY pp.clave
					ORDER BY pp.expira, pp.lote DESC
					ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
				) <= NVL(ords.cant_comp, 0)
			THEN pp.cant_inventario - pp.stock_asignado_pck --colocar la cantidad del inventario
			ELSE
				--asignar el valor máximo
				GREATEST
				(
					--lo que faltaba por asignar en el registro anterior
					NVL(ords.cant_comp, 0) -
					NVL
					(
						SUM(pp.cant_inventario - pp.stock_asignado_pck) OVER
						(
							PARTITION BY pp.clave
							ORDER BY pp.expira, pp.lote DESC
							ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
						),
						0
					),
					0 --0 si la resta es negativa
				)
		END stock_asignado_ord
	FROM prorrateo_pck pp
		LEFT JOIN ords ON pp.clave = ords.prtnum
),
validacion AS
(
	SELECT
		wh_id,
		clave,
		untcas,
		paqueteo,
		cantpzpck,
		expira,
		ftpcod,
		comp_pck,
		comp_ord,
		cant_inventario,
		stock_asignado_pck,
		disponible_ord,
		stock_asignado_ord,
		disponible_ord - stock_asignado_ord disponible_final
	FROM prorrateo_ord
)
SELECT
	clave,
	ftpcod,
	MIN(expira) expiracion_min,
	untcas,
	paqueteo,
	cantpzpck,
	SUM(cant_inventario) cant_inv,
	SUM(disponible_final) stock_disp,
	ROUND(SUM(disponible_final) / cantpzpck) packdisp,
	SUM(stock_asignado_pck + stock_asignado_ord) comprometido
FROM
	validacion
WHERE clave IN (" ++ payload ++ ")
GROUP BY
	ftpcod,
	clave,
	untcas,
	paqueteo,
	cantpzpck
"]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
		<flow-ref doc:name="Call to client-db-get-availability" doc:id="949a2585-01cb-44bd-983b-3394af2e1747" name="common-pharma-selectSub_Flow" />
		<set-payload value="#[%dw 2.0&#10;output application/json&#10;---&#10;payload]" doc:name="to Json" doc:id="25d92b1d-53c1-4ae1-bd5a-41c9cd363b5f" />
<!-- [STUDIO:"Response"]		<logger level="INFO" doc:name="Response" doc:id="30ca8b17-36de-42c8-800e-d90959eae24f" message="Response XML: #[payload]" /> [STUDIO] -->
	</sub-flow>
</mule>
