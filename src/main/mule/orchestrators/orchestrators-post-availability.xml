<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<sub-flow name="orchestrators-update-availability" doc:id="9de8a181-03dc-4282-8646-dec20083d7c8" >
<!-- [STUDIO:"Payload"]		<logger level="INFO" doc:name="Payload" doc:id="4153579e-e855-471f-bd59-07630cedd630" message="payloadXML: #[payload] " /> [STUDIO] -->
		<ee:transform doc:name="get Skus" doc:id="c7a34687-61f3-4324-b958-cd1dcfbd1680" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
("'" ++((payload.skus) joinBy "," ) replace "," with("','") ++ "'")]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="arrayAux" ><![CDATA[%dw 2.0
output application/json
---
[]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
<ee:transform doc:name="Set Query" doc:id="9fe9ae85-71bd-457f-a6db-2e5db808df54" >
            <ee:message >
            </ee:message>
            <ee:variables >
				<ee:set-variable variableName="query" ><![CDATA[%dw 2.0
import modules::pharma
output application/json
var schema = pharma::getSchema(attributes.queryParams.customer_name, p('database.wms.blueyonder.schema'),p('database.wms.mega.schema'))
---
"WITH 
claves AS (
    SELECT prtnum AS clave
    FROM " ++ schema ++ ".prtmst
    WHERE prtnum IN ("++ payload ++")
    AND wh_id_tmpl = 'AVIOR-27'
),

area_excl AS (
    SELECT  DISTINCT rtstr1
    FROM " ++ schema ++ ".poldat
    WHERE polcod = 'VAR-TRAXION'
    AND polvar = 'QUERY_DISP'
    AND polval = 'AREAS'
),

ubic_excl AS (
    SELECT DISTINCT rtstr1
    FROM " ++ schema ++ ".poldat
    WHERE polcod = 'VAR-TRAXION'
    AND polvar = 'QUERY_DISP'
    AND polval = 'UBICACIONES'
),

inventario_filtrado AS (
    SELECT 
        iv.wh_id,
        iv.untpak,
        iv.untcas,
        iv.ftpcod,
        iv.prtnum AS clave,
        iv.expire_dte AS expira,
        iv.lotnum AS lote,
        SUM(iv.untqty) AS cantidad
    FROM " ++ schema ++ ".inventory_view iv
    JOIN " ++ schema ++ ".locmst loc ON iv.stoloc = loc.stoloc AND loc.wh_id = 'AVIOR-27'
    LEFT JOIN " ++ schema ++ ".rcvlin rl ON iv.rcvkey = rl.rcvkey
    LEFT JOIN " ++ schema ++ ".rcvtrk rt ON rl.trknum = rt.trknum
    LEFT JOIN " ++ schema ++ ".trlr tr ON rt.trlr_id = tr.trlr_id
    WHERE iv.invsts = 'DISP'
    AND (tr.trlr_stat = 'D' OR tr.trlr_stat IS NULL)
    AND iv.ship_line_id IS NULL
    AND loc.arecod NOT IN (SELECT rtstr1 FROM area_excl)
    AND iv.wh_id = 'AVIOR-27'
    AND loc.stoloc NOT IN (SELECT rtstr1 FROM ubic_excl)
    AND iv.prtnum IN (SELECT clave FROM claves)
    GROUP BY iv.wh_id, iv.untpak, iv.untcas, iv.ftpcod, iv.prtnum, iv.expire_dte, iv.lotnum
),

ords_optimizado AS (
    SELECT 
        ol.prtnum,
        SUM(ol.ordqty) AS cant_comp
    FROM " ++ schema ++ ".ord_line ol
    JOIN " ++ schema ++ ".shipment_line sl ON 
        sl.prtnum = ol.prtnum AND
        sl.wh_id = ol.wh_id AND
        sl.client_id = ol.client_id AND
        sl.ordnum = ol.ordnum AND
        sl.ordlin = ol.ordlin AND
        sl.ordsln = ol.ordsln AND
        sl.linsts != 'B'
    WHERE NOT EXISTS (
        SELECT /*+ NL_AJ */ 1
        FROM " ++ schema ++ ".pckwrk_hdr ph
        JOIN " ++ schema ++ ".pckwrk_dtl pd ON pd.wrkref = ph.wrkref
        WHERE ph.wrktyp NOT IN ('M', 'T', 'G', 'E', 'R', 'D', 'S')
        AND pd.ordnum = ol.ordnum
    )
    AND ol.prtnum IN (SELECT clave FROM claves)
    GROUP BY ol.prtnum
),

pcks_optimizado AS (
    SELECT
        ph.prtnum,
        ph.ftpcod,
        SUM(ph.pckqty - pd.appqty) AS pckqty
    FROM " ++ schema ++ ".pckwrk_hdr ph
    JOIN " ++ schema ++ ".pckwrk_dtl pd ON pd.wrkref = ph.wrkref
    WHERE pd.appqty < ph.pckqty
    AND ph.wrktyp = 'P'
    AND ph.invsts = 'DISP'
    AND ph.pcksts NOT IN ('C')
    AND ph.srcare NOT IN (SELECT rtstr1 FROM area_excl)
    AND ph.prtnum IN (SELECT clave FROM claves)
    GROUP BY ph.prtnum, ph.ftpcod
),

prorrateo_pck AS (
    SELECT 
        i.wh_id,
        i.clave,
        i.untcas,
        CASE WHEN i.untpak > 1 THEN 'PQ' ELSE 'PZ' END AS paqueteo,
        CASE WHEN i.untpak = 1 THEN 1 ELSE i.untpak END AS cantpzpck,
        i.lote,
        i.expira,
        i.ftpcod,
        NVL(p.pckqty, 0) AS comp_pck,
        i.cantidad AS cant_inventario,
        CASE 
            WHEN SUM(i.cantidad) OVER(
                PARTITION BY i.clave, i.ftpcod
                ORDER BY i.expira, i.lote DESC 
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) <= NVL(p.pckqty, 0) THEN i.cantidad
            ELSE GREATEST(
                NVL(p.pckqty, 0) - NVL(SUM(i.cantidad) OVER(
                    PARTITION BY i.clave, i.ftpcod
                    ORDER BY i.expira, i.lote DESC 
                    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                ), 0), 
                0
            )
        END AS stock_asignado_pck
    FROM inventario_filtrado i
    LEFT JOIN pcks_optimizado p ON p.prtnum = i.clave AND p.ftpcod = i.ftpcod
),

prorrateo_ord AS (
    SELECT 
        pp.wh_id,
        pp.clave,
        pp.untcas,
        pp.paqueteo,
        pp.cantpzpck,
        pp.expira,
        pp.ftpcod,
        pp.comp_pck,
        pp.cant_inventario,
        pp.stock_asignado_pck,
        NVL(o.cant_comp, 0) AS comp_ord,
        pp.cant_inventario - pp.stock_asignado_pck AS disponible_ord,
        CASE 
            WHEN SUM(pp.cant_inventario - pp.stock_asignado_pck) OVER(
                PARTITION BY pp.clave
                ORDER BY pp.expira, pp.lote DESC, pp.ftpcod
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) <= NVL(o.cant_comp, 0) THEN pp.cant_inventario - pp.stock_asignado_pck
            ELSE GREATEST(
                NVL(o.cant_comp, 0) - NVL(SUM(pp.cant_inventario - pp.stock_asignado_pck) OVER(
                    PARTITION BY pp.clave
                    ORDER BY pp.expira, pp.lote DESC, pp.ftpcod 
                    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                ), 0), 
                0
            )
        END AS stock_asignado_ord
    FROM prorrateo_pck pp
    LEFT JOIN ords_optimizado o ON pp.clave = o.prtnum
)

SELECT 
    clave,
    ftpcod,
    MIN(expira) AS expiracion_min,
    untcas,
    paqueteo,
    cantpzpck,
    SUM(cant_inventario) AS cant_inv,
    SUM(disponible_ord - stock_asignado_ord) AS stock_disp,
    ROUND(SUM(disponible_ord - stock_asignado_ord) / MAX(cantpzpck)) AS packdisp,
    SUM(stock_asignado_pck + stock_asignado_ord) AS comprometido
FROM prorrateo_ord
GROUP BY clave, ftpcod, untcas, paqueteo, cantpzpck"]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
		<flow-ref doc:name="Call to client-db-get-availability" doc:id="949a2585-01cb-44bd-983b-3394af2e1747" name="common-pharma-selectSub_Flow" />
		<set-payload value="#[%dw 2.0&#10;output application/json&#10;---&#10;payload]" doc:name="to Json" doc:id="25d92b1d-53c1-4ae1-bd5a-41c9cd363b5f" />
<!-- [STUDIO:"Response"]		<logger level="INFO" doc:name="Response" doc:id="30ca8b17-36de-42c8-800e-d90959eae24f" message="Response XML: #[payload]" /> [STUDIO] -->
	</sub-flow>
</mule>
